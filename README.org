* SimpleOS: my IB personal project
[[./picture.png]]
** Information
*** What is this?
This is a simple operating system designed for educational reasons. It provides some of a C standard library with minor extensions, fit for a small program or kernel. In the future, it will take input and do some x86-specific things.

As of 1/8/2020, the project repository is locked and no longer being edited. I do not intend to work on this project any further due to the restrictions of the IB Personal Project. Thanks to everyone who helped to make this possible!

If you'd like to try it yourself, download this repository via the "Code" button, unzip =master.zip=, then insert the ISO file into a virtual machine, or burn it onto a USB drive or CD-ROM and test it on a real computer.
*** Why make this when other operating systems exist?
I wanted to learn about OS design. Many OS tutorials exist, but not many of them cover the basics beyond making a bootable file or printing to the screen. In all fairness, my project doesn't advance much further beyond them, but I attempt to create a system that is designed in such a way that it is extensible for others.
** Building instructions
*NOTE:* These instructions work on Linux distros only. Cygwin, BSD and MacOS /may/ work with these directions, but I have not tested it.
*** Install packages
You can install the needed packages with the following command on the following distro:
**** Fedora, Ubuntu, Debian, RHEL, Gentoo, OpenBSD
#+begin_src bash
  $ make packages
#+end_src
**** Everything else
Build all the packages from source.
*** Starting the toolchain
To execute the GCC and Binutils builder, run the following commands:
#+begin_src bash
  $ make tools
#+end_src
This will download the latest GCC and Binutils sources, and install them in the directory it is run in. Eventually it should take an argument on where to install the sources.
*** Actually building the OS
You can build the OS with one command:
#+begin_src bash
  $ make all
#+end_src
If you'd prefer to do it by hand, run the following:
#+begin_src bash
  $ make build
  $ make iso
  $ make qemu
#+end_src
To clean it all up:
#+begin_src bash
  $ make clean
#+end_src
** Known bugs:
- =printf()= doesn't append a "0x" in front of all hexadecimal numbers.
- The screen repeatedly blinks on and off on real hardware (need to re-write the VGA driver)
** Future features:
- Read arbitrary memory adresses correctly (fix =flongpeek=)
- Maybe map to higher half of memory?
- Read BIOS info table
